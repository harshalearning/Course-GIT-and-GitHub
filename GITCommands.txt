git COMMANDS:

Where/when --> Gives you the path.
git --version --> Gives the version of git..
git init --> create a new folder to keep track of everthing for this directory.
pwd --> present working directory.
ls --> List all the hidden files and directories.
ls -a --> list all files including hidden files.
cd - change directory
cd .. --> Goes to home directory
git help --> help you to explore more.
git add <filename> --> Adds particular file for Staging area.
git add . --> Adds all the modified/created files to the staging area. staging area keeps note od changes.
git commit -m "mandatory message" --> Code gets commited to the repository.
git log --> Get more info of the changes done. how many commits done, when and where these changes are done.
git log -n --> No of commits (n is just number)
git log --author="harsha" --> Gives the list of commits by name harsha.
git log --since="2023-10-26" --> Gives the list of commits done from given date.
git log --until="2023-10-26" --> Gves the list of commits done till given date.
git log --since="2023-10-26" --until="2023-10-27" --> Gives the logs of mentioned dates.
git log --since="1 week ago" --> gives all the logs of last 1 week.
git status --> Give the current status of the files.
cat <file> --> reads the given file.
git rm --cached <filename> --> removing file from staging area/unstaging.
git diff --> used to track the changes made in the file. what is removed and added.(---a remove, +++b add).
git diff --staged --> Give the difference in the file in staging area.
git rm <filename> --> removed the named file.
git checkout -- <filename> --> It checks the given file name in repo and replaces the existing file in local machine with the repo file.
git reset HEAD <filename> --> Bring the file back to local machine/working directory from staging area.
git commit --amend -m "message"  --> Works only for the last file to overwrite the last log with a new SAH, the advantage is we won't have the old message in the log, it will be replaced by new message and SAH.
git checkout <SAH> -- <filename> --> Works for moving commited file to staging area.
git reset --soft <SAH>  --> Moves file to mentioned version/SAH
git reset --mixed <SAH> / git reset <SAH> --> Makes same copy of repo of stating, as in mentioned SAH
git reset --hard <SAH> --> Make a copy of repo in local as in mentioned SAH.
git reset HEAD~1 --> The HEAD moves one commit behind.
git reset HEAD~n --> The HEAD moves n commits behind.
git clean -n : What we are about to clean. which are not part of staging area.
git clean -f : Not worrying about them, clean them. which are not part of staging area.
git ls-tree HEAD--> refer to any directory using this, it lists entire structure.
git ls-tree <Full/Partial SHA> --> It gives the directory structure at that point of time.
git ls-tree HEAD~2 --> refer to any directory using this, it lists entire structure of the version before 2 commits.
git log --oneline --> Gives all the logs in oneliner, in structured way.
git log --oneline -n --> Gives all the logs in oneliner for n lines.
git log --grep="reset" --> It looks for the message where log has value reset and displays all the logs.
git log <SHA old>..<SHA recent> --> Gives the logs of commits between the given SHA numbers.
git log --format="short" --> Gives the short description of Commit log.
git log --format="fuller" --> Gives the detailed and structured way of commited logs.
git log --oneline --> Gives the one liner logs.
git log --pretty --> This also provides you logs, kind of similar way to --format="short".
git branch  --> Gives the current branch you are working on. It is denoted next to *.
git branch <branchname> --> creates the branch 
git checkout <branchname> --> You get switched to particular branch mentioned in the command.
git switch <branchname> --> You get switched to particular branch mentioned in the command.
git checkout -b <branchname> --> It creates a branch and switches you to that created branch. This is popularly used one.
git switch -c <branchname> --> It also creates a branch and switches you to the newly created branch.
git log --graph --oneline --decorate -all --> It gives the oneliner commits for all the branches exists.
git diff <filename>..<filename1> --> Gives the differences between the 2 files.
git branch --merged --> 
git branch -m <fileoldname> <filenewname> --> Changes the file name to <filenewname>.
git branch -d <filename> / git branch --delete <filename> --> Deletes the file from mentioned branch.
git branch -D <filename>  --> Deletes the file from mentioned branch if the data in branch is not same as master/main.
git merge <branch> --> Merges with the given branch to the branch you are in.
git merge --no-ff <branch> --> Merges the given branch to the existing branch with new SHA, so we can have log of it.
git merge --ff-only <branch> --> Merges the given branch into the existing branch, if only FF is possible. If FF is not possible abort the merge.
git merge --abort --> clears everything and comes to data before commits.
git log --graph --online --all --decorate --> It gives a graphical representation of the commits in oneliner along with the main branch and branchesa and their merges.
git stash save "message" --> Saves data into stash.
git stash list --> Displays the stash@{0} (particular stash, as we can have multiple saves), <branchname>, message given along with the save.
git stash show -p stash@{0} --> It is similar to diff command, shows the lines added in the file compared to previous.
git stash pop stash@{0} --> It is cutiing first stash saved and adding to the branch. Stash doesnot exist, it clears the stash.
git stash apply stash@{0} --> It just copies the first stash and adds to the branch. Stash exists.
git stash pop --> It cuts the last saved stag and gets added to the branch.
git stash drop stash@{0} --> Drops the particular stash.
git stash clear --> drops/deletes everything from stash.